# Travis CI Configuration File

# Tell Travis CI which distro to use
dist: trusty

sudo: false

# Tell Travis CI we're using PHP
language: php

# Tell Travis CI which notifications to send
notifications:
  email:
    on_success: never
    on_failure: change

# whitelist branches for the "push" build check
branches:
  only:
    - develop
    - main
    - /^dev\-release\/.*$/
    - /^feature\/.*$/
    - /^fix\/.*$/

# Git clone depth
# By default Travis CI clones repositories to a depth of 50 commits
git:
  depth: 1

cache:
  directories:
    - vendor
    - $HOME/.composer/cache

# Define build versions for maitrix
env:
  global:
    - PHP_MIN_VERSION="7.2"
    - PHP_PREF_MIN_VERSION="7.3"
    - PHP_STABLE_VERSION="7.4"
    - WP_MIN_VERSION="5.3.*"
    - WP_PREF_MIN_VERSION="5.4.*"
    - WP_STABLE_VERSION="5.5.*"
    - WC_MIN_VERSION="4.6.*"
    - WC_PREF_MIN_VERSION="4.7.*"
    - WC_STABLE_VERSION="4.8.*"

# Define a matrix of additional build configurations
# The versions listed above will automatically create our first configuration,
# so it doesn't need to be re-defined below.
matrix:
  fast_finish: true
  include:
    - name: Internationalization
      php: "${PHP_PREF_MIN_VERSION}"
      env: WP_MODE=single I18N=1
    - name: Coding Standards
      php: "${PHP_PREF_MIN_VERSION}"
      env: WP_MODE=single PHP_LINT=1
    - name: Static Code Analysis
      php: "${PHP_PREF_MIN_VERSION}"
      env: WP_MODE=single WP_VERSION="${WP_STABLE_VERSION}" WC_VERSION="${WC_PREF_MIN_VERSION}" PHP_ANALYZE=1
    - name: Latest Stable
      php: "${PHP_PREF_MIN_VERSION}"
      env: WP_MODE=single WP_VERSION="${WP_STABLE_VERSION}" WC_VERSION="${WC_STABLE_VERSION}" PHP_UNIT=1 COVERAGE=1
    - name: Preferred Minimum requirements
      if: (branch IN (develop, main) OR branch =~ /^dev\-release\/.*$/) AND NOT type = pull_request
      php: "${PHP_PREF_MIN_VERSION}"
      env: WP_MODE=single WP_VERSION="${WP_PREF_MIN_VERSION}" WC_VERSION="${WC_PREF_MIN_VERSION}" PHP_UNIT=1
    - name: Minimum requirements
      if: (branch IN (develop, main) OR branch =~ /^dev\-release\/.*$/) AND NOT type = pull_request
      php: "${PHP_MIN_VERSION}"
      env: WP_MODE=single WP_VERSION="${WP_MIN_VERSION}" WC_VERSION="${WC_MIN_VERSION}" PHP_UNIT=1
    - name: Bleeding Edge
      if: (branch IN (develop, main) OR branch =~ /^dev\-release\/.*$/) AND NOT type = pull_request
      php: "${PHP_STABLE_VERSION}"
      env: WP_MODE=single WP_VERSION=dev-master WC_VERSION=dev-master PHP_UNIT=1
    - name: Multisite Compatibility
      if: (branch IN (develop, main) OR branch =~ /^dev\-release\/.*$/) AND NOT type = pull_request
      php: "${PHP_PREF_MIN_VERSION}"
      env: WP_MODE=multi WP_VERSION="${WP_PREF_MIN_VERSION}" WC_VERSION="${WC_PREF_MIN_VERSION}" PHP_UNIT=1
  allow_failures:
    - name: Bleeding Edge

addons:
  apt:
    packages:
      - nodejs

before_install:
  - npm install -g npm@6.14
  - composer self-update --1
  - composer install --no-autoloader --prefer-source --no-interaction
  - |
    if [[ "$PHP_UNIT" == "1" OR "$PHP_ANALYZE" == "1" ]]; then
      composer require "wordpress/wordpress:${WP_VERSION}" --dev --no-autoloader --prefer-source --with-dependencies
      composer require "woocommerce/woocommerce:${WC_VERSION}" --dev --no-autoloader --prefer-source --with-dependencies
      if [[ "$WC_VERSION" == "dev-master" ]]; then
        composer require "woocommerce/woocommerce-admin:v1.3.0-beta.1" --dev --no-autoloader --prefer-source --with-dependencies
      fi
    fi

install:
  - npm run ci:setup

before_script:
  - export PATH="$HOME/.composer/vendor/bin:$PATH"
  # Setup WordPress coding standards
  - |
    if [[ "$PHP_LINT" == "1" ]]; then
      composer global require wp-coding-standards/wpcs
    fi
  # Setup unit testing environment
  - |
    if [[ "$PHP_UNIT" == "1" ]]; then
      # bash scripts/install-wp-tests.sh wordpress_test root '' localhost $WP_VERSION
      if [[ $TRAVIS_PHP_VERSION == "7.4" ]]; then
        composer global require "phpunit/php-code-coverage=dev-master"
        composer global require "sebastian/global-state:dev-master"
        composer global require "phpunit/phpunit=dev-master"
      else
        composer global require "phpunit/phpunit=7.*"
      fi
    fi

script:
  - |
    if [[ "$I18N" == "1" ]]; then
      if [[ "$WP_MODE" == "single" ]]; then WP_MULTISITE=0 npm run i18n:check; fi
    fi
  - |
    if [[ "$PHP_LINT" == "1" ]]; then
      if [[ "$WP_MODE" == "single" ]]; then WP_MULTISITE=0 npm run lint; fi
    fi
  - |
    if [[ "$PHP_ANALYZE" == "1" ]]; then
      if [[ "$WP_MODE" == "single" ]]; then WP_MULTISITE=0 npm run analyze; fi
    fi
  - |
    if [[ "$PHP_UNIT" == "1" ]]; then
      if [[ "$WP_MODE" == "multi" ]]; then WP_MULTISITE=1 npm run test; fi
      if [[ "$WP_MODE" == "single" ]]; then WP_MULTISITE=0 npm run test; fi
    fi

after_success:
  - |
    if [[ "$COVERAGE" == "1" ]]; then
      bash <(curl -s https://codecov.io/bash)
    fi
